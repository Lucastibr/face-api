@page
@model IndexModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{

}
<div class="container mt-4">
    <h2>Detecções Faciais</h2>

    <div class="row">
        <!-- Coluna para a tabela -->
        <div class="col-md-8">
            <table class="table table-striped" id="detectionTable">
                <thead>
                    <tr>
                        <th>Gênero</th>
                        <th>Confiança de Gênero</th>
                        <th>Idade</th>
                        <th>Expressão Principal</th>
                        <th>Imagem</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detection in Model.Detections)
                    {
                        <tr>
                            <td>@(detection.Gender == "male" ? "Homem" : "Mulher")</td>
                            <td>@detection.Age</td>
                            <td>
                                @switch (detection.MainExpression)
                                {
                                    case "neutral":
                                        @:Neutro
                                        break;
                                    case "happy":
                                        @:Feliz
                                        break;
                                    case "sad":
                                        @:Triste
                                        break;
                                    case "angry":
                                        @:Bravo
                                        break;
                                    case "fearful":
                                        @:Assustado
                                        break;
                                    case "disgusted":
                                        @:Nojo
                                        break;
                                    case "surprised":
                                        @:Surpreso
                                        break;
                                    default:
                                        @:Desconhecido
                                        break;
                                }
                            </td>
                            <td>
                                <img src="@detection.ImageBase64" alt="Imagem de Detecção" width="100" height="100"
                                    class="rounded" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Coluna para o gráfico -->
        <div class="col-md-4">
            <h4>Distribuição de Gêneros</h4>
            <canvas id="genderChart" width="400" height="400"></canvas>
        </div>
    </div>
</div>
<script src="js/chart.js"></script>
<script src="js/signalr.min.js"></script>

<script>
    let detections = @Html.Raw(Json.Serialize(Model.Detections));
    let maleCount = detections.filter(d => d.gender === 'male').length;
    let femaleCount = detections.filter(d => d.gender === 'female').length;

    // Iniciar gráfico
    const ctx = document.getElementById('genderChart').getContext('2d');
    const genderChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Homem', 'Mulher'],
            datasets: [{
                data: [maleCount, femaleCount],
                backgroundColor: ['#36A2EB', '#FF6384'],
            }]
        }
    });

    function addDetectionToTable(gender, age, imageBase64, mainExpression) {
        const table = document.getElementById('detectionTable').getElementsByTagName('tbody')[0];

        const newRow = table.insertRow(0);  // Adiciona nova linha no topo
        const genderCell = newRow.insertCell(0);
        const ageCell = newRow.insertCell(1);
        const expressionCell = newRow.insertCell(2);
        const imageCell = newRow.insertCell(3);

        // Converter o gênero de 'male' para 'Homem' e 'female' para 'Mulher'
        genderCell.textContent = (gender === 'male') ? 'Homem' : 'Mulher';

        // Adicionar a idade
        ageCell.textContent = age;

        // Converter a expressão facial de inglês para português
        const translatedExpression = translateExpression(mainExpression);
        expressionCell.textContent = translatedExpression;

        // Adicionar a imagem
        imageCell.innerHTML = `<img src="${imageBase64}" width="100" height="100" class="rounded" />`;

        // Limitar a tabela a 5 registros
        if (table.rows.length > 5) {
            table.deleteRow(5);  // Remove a última linha
        }
    }

    // Função para converter a expressão do inglês para o português
    function translateExpression(expression) {
        const translations = {
            neutral: 'Neutro',
            happy: 'Feliz',
            sad: 'Triste',
            angry: 'Bravo',
            fearful: 'Assustado',
            disgusted: 'Nojo',
            surprised: 'Surpreso'
        };

        return translations[expression] || expression;  // Retorna a tradução ou a própria expressão caso não haja correspondência
    }

    // Atualizar gráfico
    function updateGenderChart(gender) {
        if (gender === 'male') {
            maleCount++;
        } else {
            femaleCount++;
        }
        genderChart.data.datasets[0].data = [maleCount, femaleCount];
        genderChart.update();
    }

    // Conectar ao SignalR
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/detectionHub")
        .build();

    connection.on("ReceiveDetectionUpdate", (gender, age, imageBase64, mainExpression) => {
        console.log(mainExpression);
        // Adicionar a detecção à tabela com a expressão facial
        addDetectionToTable(gender, age, imageBase64, mainExpression);

        // Atualizar o gráfico de gênero
        updateGenderChart(gender);
    });


    connection.start().catch(err => console.error(err.toString()));
</script>
